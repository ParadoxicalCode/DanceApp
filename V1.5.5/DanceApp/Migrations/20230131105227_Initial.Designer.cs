// <auto-generated />
using System;
using DanceApp.Model.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DanceApp.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20230131105227_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("DanceApp.Model.Data.AgeCategory", b =>
                {
                    b.Property<int>("AgeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AgeCategoryId");

                    b.ToTable("AgeCategories");

                    b.HasData(
                        new
                        {
                            AgeCategoryId = 1,
                            MaxAge = 6,
                            MinAge = 0,
                            Name = "Дети 0"
                        },
                        new
                        {
                            AgeCategoryId = 2,
                            MaxAge = 9,
                            MinAge = 7,
                            Name = "Дети 1"
                        },
                        new
                        {
                            AgeCategoryId = 3,
                            MaxAge = 11,
                            MinAge = 10,
                            Name = "Дети 2"
                        },
                        new
                        {
                            AgeCategoryId = 4,
                            MaxAge = 13,
                            MinAge = 12,
                            Name = "Юниоры 1"
                        },
                        new
                        {
                            AgeCategoryId = 5,
                            MaxAge = 15,
                            MinAge = 14,
                            Name = "Юниоры 2"
                        },
                        new
                        {
                            AgeCategoryId = 6,
                            MaxAge = 18,
                            MinAge = 16,
                            Name = "Молодёжь"
                        },
                        new
                        {
                            AgeCategoryId = 7,
                            MaxAge = 100,
                            MinAge = 19,
                            Name = "Взрослые"
                        },
                        new
                        {
                            AgeCategoryId = 8,
                            MaxAge = 100,
                            MinAge = 35,
                            Name = "Сеньоры"
                        },
                        new
                        {
                            AgeCategoryId = 9,
                            MaxAge = 100,
                            MinAge = 61,
                            Name = "Гранд-сеньоры"
                        });
                });

            modelBuilder.Entity("DanceApp.Model.Data.AgeCategoryInGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgeCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId", "AgeCategoryId");

                    b.HasIndex("AgeCategoryId");

                    b.ToTable("AgeCategoriesInGroup");
                });

            modelBuilder.Entity("DanceApp.Model.Data.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CountryId = 1,
                            Name = "Новосибирск"
                        },
                        new
                        {
                            CityId = 2,
                            CountryId = 1,
                            Name = "Москва"
                        },
                        new
                        {
                            CityId = 3,
                            CountryId = 1,
                            Name = "Екатеринбург"
                        },
                        new
                        {
                            CityId = 4,
                            CountryId = 1,
                            Name = "Казань"
                        },
                        new
                        {
                            CityId = 5,
                            CountryId = 1,
                            Name = "Нижний Новгород"
                        },
                        new
                        {
                            CityId = 6,
                            CountryId = 1,
                            Name = "Челябинск"
                        },
                        new
                        {
                            CityId = 7,
                            CountryId = 1,
                            Name = "Красноярск"
                        },
                        new
                        {
                            CityId = 8,
                            CountryId = 1,
                            Name = "Самара"
                        },
                        new
                        {
                            CityId = 9,
                            CountryId = 1,
                            Name = "Уфа"
                        },
                        new
                        {
                            CityId = 10,
                            CountryId = 1,
                            Name = "Ростов-на-Дону"
                        },
                        new
                        {
                            CityId = 11,
                            CountryId = 1,
                            Name = "Омск"
                        },
                        new
                        {
                            CityId = 12,
                            CountryId = 1,
                            Name = "Краснодар"
                        },
                        new
                        {
                            CityId = 13,
                            CountryId = 1,
                            Name = "Воронеж"
                        },
                        new
                        {
                            CityId = 14,
                            CountryId = 1,
                            Name = "Волгоград"
                        },
                        new
                        {
                            CityId = 15,
                            CountryId = 1,
                            Name = "Пермь"
                        });
                });

            modelBuilder.Entity("DanceApp.Model.Data.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Competition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Selection")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("CompetitionId");

                    b.HasIndex("ClubId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Россия"
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "Беларусь"
                        },
                        new
                        {
                            CountryId = 3,
                            Name = "Казахстан"
                        },
                        new
                        {
                            CountryId = 4,
                            Name = "Украина"
                        },
                        new
                        {
                            CountryId = 5,
                            Name = "Грузия"
                        },
                        new
                        {
                            CountryId = 6,
                            Name = "Таджикистан"
                        },
                        new
                        {
                            CountryId = 7,
                            Name = "Азербайджан"
                        },
                        new
                        {
                            CountryId = 8,
                            Name = "Туркменистан"
                        },
                        new
                        {
                            CountryId = 9,
                            Name = "Киргизия"
                        },
                        new
                        {
                            CountryId = 10,
                            Name = "Узбекистан"
                        },
                        new
                        {
                            CountryId = 11,
                            Name = "Армения"
                        },
                        new
                        {
                            CountryId = 12,
                            Name = "Молдавия"
                        },
                        new
                        {
                            CountryId = 13,
                            Name = "Литва"
                        },
                        new
                        {
                            CountryId = 14,
                            Name = "Латвия"
                        },
                        new
                        {
                            CountryId = 15,
                            Name = "Эстония"
                        });
                });

            modelBuilder.Entity("DanceApp.Model.Data.Dance", b =>
                {
                    b.Property<int>("DanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("DanceId");

                    b.ToTable("Dances");

                    b.HasData(
                        new
                        {
                            DanceId = 1,
                            Name = "самба",
                            ShortName = "S"
                        },
                        new
                        {
                            DanceId = 2,
                            Name = "ча-ча-ча",
                            ShortName = "Ch"
                        },
                        new
                        {
                            DanceId = 3,
                            Name = "румба",
                            ShortName = "R"
                        },
                        new
                        {
                            DanceId = 4,
                            Name = "пасодобль",
                            ShortName = "Pd"
                        },
                        new
                        {
                            DanceId = 5,
                            Name = "джайв",
                            ShortName = "J"
                        },
                        new
                        {
                            DanceId = 6,
                            Name = "медленный вальс",
                            ShortName = "W"
                        },
                        new
                        {
                            DanceId = 7,
                            Name = "танго",
                            ShortName = "T"
                        },
                        new
                        {
                            DanceId = 8,
                            Name = "венский вальс",
                            ShortName = "Vv"
                        },
                        new
                        {
                            DanceId = 9,
                            Name = "медленный фокстрот",
                            ShortName = "SF"
                        },
                        new
                        {
                            DanceId = 10,
                            Name = "квикстеп",
                            ShortName = "Q"
                        });
                });

            modelBuilder.Entity("DanceApp.Model.Data.Dancer", b =>
                {
                    b.Property<int>("DancerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Birthday")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PairId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Trainer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DancerId");

                    b.HasIndex("ClubId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("GenderId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PairId");

                    b.ToTable("Dancers");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            Name = "Мужчина"
                        },
                        new
                        {
                            GenderId = 2,
                            Name = "Женщина"
                        });
                });

            modelBuilder.Entity("DanceApp.Model.Data.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("TourId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("TourId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Judge", b =>
                {
                    b.Property<int>("JudgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("JudgeId");

                    b.HasIndex("ClubId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("PositionId");

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("DanceApp.Model.Data.JudgeInGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JudgeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId", "JudgeId");

                    b.HasIndex("JudgeId");

                    b.ToTable("JudgeInGroups");
                });

            modelBuilder.Entity("DanceApp.Model.Data.JudgeInPerformance", b =>
                {
                    b.Property<int>("PerformanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JudgeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PerformanceId", "JudgeId");

                    b.HasIndex("JudgeId");

                    b.ToTable("JudgeInPerformances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Pair", b =>
                {
                    b.Property<int>("PairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PairId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("DanceApp.Model.Data.PairInPerformance", b =>
                {
                    b.Property<int>("PairInPerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Disqualification")
                        .HasColumnType("TEXT");

                    b.Property<int>("PairId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PairInPerformanceId");

                    b.HasIndex("PairId");

                    b.HasIndex("PerformanceId");

                    b.ToTable("PairInPerformances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Performance", b =>
                {
                    b.Property<int>("PerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TourId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PerformanceId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DanceId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TourId");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            Name = "Главный судья"
                        },
                        new
                        {
                            PositionId = 2,
                            Name = "Заместитель главного судьи"
                        },
                        new
                        {
                            PositionId = 3,
                            Name = "Главный секретарь соревнований"
                        },
                        new
                        {
                            PositionId = 4,
                            Name = "Линейный судья"
                        },
                        new
                        {
                            PositionId = 5,
                            Name = "Судья при участниках"
                        });
                });

            modelBuilder.Entity("DanceApp.Model.Data.ScoreInDance", b =>
                {
                    b.Property<int>("ScoreInDanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JudgeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PairId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ScoreInDanceId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DanceId");

                    b.HasIndex("JudgeId");

                    b.HasIndex("PairId");

                    b.HasIndex("PerformanceId");

                    b.ToTable("ScoreInDances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("TourId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            Name = "Финал"
                        },
                        new
                        {
                            TourId = 2,
                            Name = "Полуфинал"
                        },
                        new
                        {
                            TourId = 3,
                            Name = "1/4"
                        },
                        new
                        {
                            TourId = 4,
                            Name = "1/8"
                        });
                });

            modelBuilder.Entity("DanceApp.Model.Data.AgeCategoryInGroup", b =>
                {
                    b.HasOne("DanceApp.Model.Data.AgeCategory", "AgeCategory")
                        .WithMany("AgeCategoryInGroup")
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Group", "Group")
                        .WithMany("AgeCategoryInGroup")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeCategory");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DanceApp.Model.Data.City", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Club", b =>
                {
                    b.HasOne("DanceApp.Model.Data.City", "City")
                        .WithMany("Club")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Country", "Country")
                        .WithMany("Club")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Competition", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Club", "Club")
                        .WithMany("Competition")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Dancer", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Club", "Club")
                        .WithMany("Dancer")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Competition", "Competition")
                        .WithMany("Dancer")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Gender", "Gender")
                        .WithMany("Dancer")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Group", "Group")
                        .WithMany("Dancer")
                        .HasForeignKey("GroupId");

                    b.HasOne("DanceApp.Model.Data.Pair", "Pair")
                        .WithMany()
                        .HasForeignKey("PairId");

                    b.Navigation("Club");

                    b.Navigation("Competition");

                    b.Navigation("Gender");

                    b.Navigation("Group");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Group", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Competition", "Competition")
                        .WithMany("Group")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Judge", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Competition", "Competition")
                        .WithMany("Judge")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Position", "Position")
                        .WithMany("Judge")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Competition");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DanceApp.Model.Data.JudgeInGroup", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Group", "Group")
                        .WithMany("JudgeInGroup")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Judge", "Judge")
                        .WithMany("JudgeInGroup")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Judge");
                });

            modelBuilder.Entity("DanceApp.Model.Data.JudgeInPerformance", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Judge", "Judge")
                        .WithMany("JudgeInPerformance")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Performance", "Performance")
                        .WithMany("JudgeInPerformance")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Judge");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Pair", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Competition", "Competition")
                        .WithMany("Pair")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("DanceApp.Model.Data.PairInPerformance", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Pair", "Pair")
                        .WithMany("PairInPerformance")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Performance", "Performance")
                        .WithMany()
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Performance", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Competition", "Competition")
                        .WithMany("Performance")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Dance", "Dance")
                        .WithMany("Performance")
                        .HasForeignKey("DanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Group", "Group")
                        .WithMany("Performance")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Dance");

                    b.Navigation("Group");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DanceApp.Model.Data.ScoreInDance", b =>
                {
                    b.HasOne("DanceApp.Model.Data.Competition", "Competition")
                        .WithMany("ScoreInDances")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Dance", "Dance")
                        .WithMany("ScoreInDances")
                        .HasForeignKey("DanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Judge", "Judge")
                        .WithMany("ScoreInDances")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Pair", "Pair")
                        .WithMany("ScoreInDances")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanceApp.Model.Data.Performance", "Performance")
                        .WithMany("ScoreInDances")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Dance");

                    b.Navigation("Judge");

                    b.Navigation("Pair");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("DanceApp.Model.Data.AgeCategory", b =>
                {
                    b.Navigation("AgeCategoryInGroup");
                });

            modelBuilder.Entity("DanceApp.Model.Data.City", b =>
                {
                    b.Navigation("Club");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Club", b =>
                {
                    b.Navigation("Competition");

                    b.Navigation("Dancer");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Competition", b =>
                {
                    b.Navigation("Dancer");

                    b.Navigation("Group");

                    b.Navigation("Judge");

                    b.Navigation("Pair");

                    b.Navigation("Performance");

                    b.Navigation("ScoreInDances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Dance", b =>
                {
                    b.Navigation("Performance");

                    b.Navigation("ScoreInDances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Gender", b =>
                {
                    b.Navigation("Dancer");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Group", b =>
                {
                    b.Navigation("AgeCategoryInGroup");

                    b.Navigation("Dancer");

                    b.Navigation("JudgeInGroup");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Judge", b =>
                {
                    b.Navigation("JudgeInGroup");

                    b.Navigation("JudgeInPerformance");

                    b.Navigation("ScoreInDances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Pair", b =>
                {
                    b.Navigation("PairInPerformance");

                    b.Navigation("ScoreInDances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Performance", b =>
                {
                    b.Navigation("JudgeInPerformance");

                    b.Navigation("ScoreInDances");
                });

            modelBuilder.Entity("DanceApp.Model.Data.Position", b =>
                {
                    b.Navigation("Judge");
                });
#pragma warning restore 612, 618
        }
    }
}
