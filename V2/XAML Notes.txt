Шпаргалка по XAML.

Делим окно на две части по вертикали:
<Grid.RowDefinitions>
	<RowDefinition ></RowDefinition>
	<RowDefinition></RowDefinition>
	<RowDefinition></RowDefinition>
</Grid.RowDefinitions>

Для задания размеров в скобочках указываем долю строки от общего количества строк (* - доли, без * - пиксели):
<Grid.RowDefinitions>
	<RowDefinition Height="1*" ></RowDefinition>
	<RowDefinition Height="1*"></RowDefinition>
</Grid.RowDefinitions>

Делим окно на две части по горизонтали
<Grid.ColumnDefinitions>
	<ColumnDefinition></ColumnDefinition>
	<ColumnDefinition></ColumnDefinition>
	<ColumnDefinition></ColumnDefinition>
</Grid.ColumnDefinitions>

Для задания размеров в скобочках указываем долю столбца от общего количества столбцов (* - доли, без * - пиксели):
<Grid.ColumnDefinitions>
	<ColumnDefinition Width="1*"></ColumnDefinition>
	<ColumnDefinition Width="1*"></ColumnDefinition>
</Grid.ColumnDefinitions>

Для задания кнопки в определённой ячейке Grid:
<Button Grid.Column="0" Grid.Row="0" Content="Строка 0 Столбец 0"  />

Для задания кнопки на несколько ячеек (где 0 - это точка отсчёта слева):
<Button Grid.Column="0" Grid.Row="1" Content="Объединение трех столбцов" Grid.ColumnSpan="3"  />

GridSplitter - штука, которую можно растягивать (динамически изменяющаяся ширина):
<Grid>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <Button Grid.Column="0" Content="Левая кнопка" />
    <GridSplitter Grid.Column="1" ShowsPreview="False" Width="3"
        HorizontalAlignment="Center" VerticalAlignment="Stretch" />
    <Button Grid.Column="2" Content="Правая кнопка" />
</Grid>

<ColumnDefinition Width="Auto" /> - это ширина границы.

То же самое, только распространяется на несколько строк:
<Grid>
	<Grid.ColumnDefinitions>
		<ColumnDefinition Width="*" />
		<ColumnDefinition Width="Auto" />
		<ColumnDefinition Width="*" />
	</Grid.ColumnDefinitions>
	<Grid.RowDefinitions>
		<RowDefinition></RowDefinition>
		<RowDefinition></RowDefinition>
	</Grid.RowDefinitions>
	<GridSplitter Grid.Column="1" Grid.RowSpan="2" ShowsPreview="False" Width="3"
		HorizontalAlignment="Center" VerticalAlignment="Stretch" />
</Grid>

Более продвинутый пример:
<Grid>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
        <RowDefinition Height="*"></RowDefinition>
        <RowDefinition Height="Auto"></RowDefinition>
        <RowDefinition Height="*"></RowDefinition>
    </Grid.RowDefinitions>
    <GridSplitter Grid.Column="1"  Grid.Row="0" ShowsPreview="False" Width="3"
        HorizontalAlignment="Center" VerticalAlignment="Stretch" />
    <GridSplitter Grid.Row="1" Grid.ColumnSpan="3" Height="3"
        HorizontalAlignment="Stretch" VerticalAlignment="Center" />
    <Canvas Grid.Column="0" Grid.Row="0">
        <TextBlock>Левая панель</TextBlock>
    </Canvas>
    <Canvas Grid.Column="2" Grid.Row="0" Background="LightGreen">
        <TextBlock>Правая панель</TextBlock>
    </Canvas>
    <Canvas Grid.ColumnSpan="3" Grid.Row="2" Background="#dfffff">
        <TextBlock Canvas.Left="60">Нижняя панель</TextBlock>
    </Canvas>
</Grid>

StackPanel - упорядочивает свои элементы в линию(по горизонтали):
<Grid>
	<StackPanel>
		<Button Background="Blue" Content="1" />
		<Button Background="White" Content="2" />
		<Button Background="Red" Content="3" />
	</StackPanel>
</Grid>

StackPanel (по вертикали):
<Grid>
	<StackPanel Orientation="Horizontal">
		<Button Background="Blue" MinWidth="30" Content="1" />
		<Button Background="White" MinWidth="30" Content="2" />
		<Button Background="Red" MinWidth="30" Content="3" />
	</StackPanel>
</Grid>

При горизонтальной ориентации все вложенные элементы располагаются слева направо. 
Если мы хотим, чтобы наполнение стека начиналось справа налево, то нам надо задать свойство 
FlowDirection: <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft">. 
По умолчанию это свойство имеет значение LeftToRight - то есть слева направо.

DockPanel - прижимает свои элементы к какой-либо стороне:
<DockPanel LastChildFill="True">
	<Button DockPanel.Dock="Top" Background="AliceBlue" Content="Верхняя кнопка" />
	<Button DockPanel.Dock="Bottom" Background="BlanchedAlmond" Content="Нижняя кнопка" />
	<Button DockPanel.Dock="Left" Background="Aquamarine" Content="Левая кнопка" />
	<Button DockPanel.Dock="Right" Background="DarkGreen" Content="Правая кнопка" />
	<Button Background="LightGreen" Content="Центр" />
</DockPanel>

Если прижать два элемента к одной стороне, то они будут идти по порядку

WrapPanel - работает как StackPanel, только переносит элементы на следующую строку, если они не помещаются

WrapPanel (по горизонтали):
<WrapPanel>
	<Button Background="AliceBlue" Content="Кнопка 1" />
	<Button Background="Blue" Content="Кнопка 2" />
	<Button Background="Aquamarine" Content="Кнопка 3" Height="30"/>
	<Button Background="DarkGreen" Content="Кнопка 4" Height="20"/>
	<Button Background="LightGreen" Content="Кнопка 5"/>
	<Button Background="RosyBrown" Content="Кнопка 6" Width="80" />
	<Button Background="GhostWhite" Content="Кнопка 7" />
</WrapPanel>

WrapPanel (по вертикали):
<WrapPanel Orientation="Vertical">
    <Button Background="AliceBlue" Content="Кнопка 1" Height="50" />
    <Button Background="Blue" Content="Кнопка 2" />
    <Button Background="Aquamarine" Content="Кнопка 3" Width="60"/>
    <Button Background="DarkGreen" Content="Кнопка 4" Width="80"/>
    <Button Background="LightGreen" Content="Кнопка 5"/>
    <Button Background="RosyBrown" Content="Кнопка 6" Height="80" />
    <Button Background="GhostWhite" Content="Кнопка 7" />
    <Button Background="Bisque" Content="Кнопка 8" />
</WrapPanel>

Задание ширины элемента WrapPanel:
<WrapPanel ItemHeight="30" ItemWidth="80" Orientation="Horizontal">
    <Button Background="AliceBlue" Content="1" />
    <Button Background="Blue" Content="2" />
    <Button Background="Aquamarine" Content="3"/>
    <Button Background="DarkGreen" Content="4"/>
    <Button Background="LightGreen" Content="5"/>
    <Button Background="AliceBlue" Content="6"  />
    <Button Background="Blue" Content="7" />
</WrapPanel>

WrapPanel справа GridSplitter:
<Grid>
	<Grid.ColumnDefinitions>
		<ColumnDefinition Width="*" />
		<ColumnDefinition Width="Auto" />
		<ColumnDefinition Width="*" />
	</Grid.ColumnDefinitions>
	<GridSplitter Grid.Column="1" Width="4" HorizontalAlignment="Center" />

	<WrapPanel Grid.Column="2">
		<Grid Name="GridForText">
			<TextBlock TextWrapping="WrapWithOverflow" Text="Roses are red. asgkja lsgs akjlgh sgkjl" />
		</Grid>
	</WrapPanel>
</Grid>

Border - окраска 

Button:
BorderThickness="0" - убрать границу кнопки

Равномерное распределение элементов:
<UniformGrid Rows="1">
	<Rectangle Width="50" Height="50" Fill="Red" VerticalAlignment="Center"/>
	<Rectangle Width="50" Height="50" Fill="Blue" VerticalAlignment="Center"/>
	<Rectangle Width="50" Height="50" Fill="Green" VerticalAlignment="Center"/>
</UniformGrid>

Можно создавать свои стили. Стили размещаются в словаре ресурсов, который мы либо
создаём сами, либо используем App.xaml.
Если мы создаём словарь ресурсов сами, то необходимо прописать в App.xaml:
<Application.Resources>
	<ResourceDictionary>
		<ResourceDictionary.MergedDictionaries>
			<ResourceDictionary Source="Resources/Base/Brushes.xaml"/> // Путь словаря данных.
		</ResourceDictionary.MergedDictionaries>
	</ResourceDictionary>
</Applications.Resources>